name: Deploy Vibestylerai Backend

on:
  push:
    branches:
      - vibestylerai-main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # ↴ Server/Projekt
      SERVER_USER: root
      SERVER_HOST: 167.235.200.242
      SERVER_DIR: /var/www/vibestylerai # Zielordner auf dem Server
      APP_DIR: /var/www/vibestylerai # Ordner mit package.json (ggf. anpassen)
      APP_NAME: vibestylerai
      NS: vibestylerai

      # ↴ App-Start (PORT per ENV, Start über start:prod)
      PORT: "3007"
      START_CMD: "npm run start:prod"

    steps:
      # 1) Code aus deinem Repo auschecken
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Seakuh/DOC_RAG_SERVER_BACKEND
          ref: vibestylerai-main

      # 2) SSH-Key für Serverzugriff laden (SSH_KEY in Repo-Secrets hinterlegen)
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # 3) Server Host Key trusten (verhindert Interactive Prompt)
      - name: Trust server host key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H "${{ env.SERVER_HOST }}" 2>/dev/null >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # 4) Code auf den Server syncen (schnell & sicher; kein Git auf dem Server nötig)
      - name: Upload code to server (rsync)
        shell: bash
        run: |
          set -euo pipefail
          ssh -T ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p '${{ env.SERVER_DIR }}'"
          rsync -az --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.env' \
            --exclude 'npm-debug.log' \
            ./ ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.SERVER_DIR }}/

      # 5) Install, Build, Prune & Start/Reload via PM2 (nur diese App)
      - name: Install, build and start on server
        shell: bash
        run: |
          echo "🚀 PM2 Start/Reload (mit ENV)"
          if pm2 describe "$APP_NAME" --namespace "$NS" >/dev/null 2>&1; then
            HETZNER_ACCESS_KEY='${{ secrets.HETZNER_ACCESS_KEY }}' \
            HETZNER_BUCKET_NAME='${{ secrets.HETZNER_BUCKET_NAME }}' \
            HETZNER_SECRET_KEY='${{ secrets.HETZNER_SECRET_KEY }}' \
            MONGODB_URI='${{ secrets.MONGODB_URI }}' \
            REPLICATE_API_TOKEN='${{ secrets.REPLICATE_API_TOKEN }}' \
            STRIPE_PRICE_ID='${{ secrets.STRIPE_PRICE_ID }}' \
            STRIPE_SECRET_KEY='${{ secrets.STRIPE_SECRET_KEY }}' \
            STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}' \
            PORT='${{ env.PORT }}' \
            NODE_ENV=production \
            pm2 restart "$APP_NAME" --namespace "$NS" --update-env
          else
            HETZNER_ACCESS_KEY='${{ secrets.HETZNER_ACCESS_KEY }}' \
            HETZNER_BUCKET_NAME='${{ secrets.HETZNER_BUCKET_NAME }}' \
            HETZNER_SECRET_KEY='${{ secrets.HETZNER_SECRET_KEY }}' \
            MONGODB_URI='${{ secrets.MONGODB_URI }}' \
            REPLICATE_API_TOKEN='${{ secrets.REPLICATE_API_TOKEN }}' \
            STRIPE_PRICE_ID='${{ secrets.STRIPE_PRICE_ID }}' \
            STRIPE_SECRET_KEY='${{ secrets.STRIPE_SECRET_KEY }}' \
            STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}' \
            PORT='${{ env.PORT }}' \
            NODE_ENV=production \
            pm2 start bash --name "$APP_NAME" --namespace "$NS" -- -lc "cd $APP_DIR && $START_CMD"
          fi
                  
          pm2 save
                  
          set -euo pipefail
          ssh -T ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            set -euo pipefail

            APP_DIR="${{ env.APP_DIR }}"
            APP_NAME="${{ env.APP_NAME }}"
            NS="${{ env.NS }}"
            START_CMD="${{ env.START_CMD }}"
            PORT="${{ env.PORT }}"

            cd "$APP_DIR"

            # Node & PM2 sicherstellen (ohne andere Apps anzufassen)
            if ! command -v node >/dev/null 2>&1; then
              echo "📦 Installiere Node.js"
              apt-get update
              apt-get install -y curl
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "📦 Installiere PM2"
              npm i -g pm2
            fi

            # Dev-Dependencies installieren (für Nest-Build notwendig)
            echo "📦 Dependencies (inkl. dev) installieren"
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi

            # Build (Nest -> dist/)
            echo "⚒️  Build"
            npm run build

            # Dev-Dependencies entfernen für schlankes Runtime-Image
            echo "🧹 Prune devDependencies"
            npm prune --omit=dev || true

            # Start/Reload NUR diese App & in eigenem Namespace
            echo "🚀 PM2 Start/Reload"
            if pm2 describe "$APP_NAME" --namespace "$NS" >/dev/null 2>&1; then
              # env aktualisieren und Prozess neu starten
              PORT="$PORT" pm2 restart "$APP_NAME" --namespace "$NS" --update-env
            else
              # Erster Start: korrekter cwd + ENV PORT
              PORT="$PORT" pm2 start bash --name "$APP_NAME" --namespace "$NS" -- -lc "cd $APP_DIR && $START_CMD"
            fi

            pm2 save
          EOF
