name: Deploy Vibestylerai Backend

on:
  push:
    branches:
      - vibestylerai-main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SERVER_USER: root
      SERVER_HOST: 167.235.200.242
      SERVER_DIR: /var/www/vibestylerai # Zielordner auf Server
      APP_DIR: /var/www/vibestylerai # Ordner mit package.json
      APP_NAME: vibestylerai
      NS: vibestylerai
      START_CMD: "npm run start -- -p 3007" # oder "npm run start:prod"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Seakuh/DOC_RAG_SERVER_BACKEND
          ref: vibestylerai-main

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ env.SERVER_HOST }}" 2>/dev/null >> ~/.ssh/known_hosts

      - name: Upload code to server
        run: |
          ssh -T ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p '${{ env.SERVER_DIR }}'"
          rsync -az --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.env' \
            ./ ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.SERVER_DIR }}/

      - name: Install & start on server
        run: |
          ssh -T ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            set -euo pipefail
            APP_DIR="${{ env.APP_DIR }}"
            APP_NAME="${{ env.APP_NAME }}"
            NS="${{ env.NS }}"
            START_CMD="${{ env.START_CMD }}"

            cd "$APP_DIR"

            # Node & PM2 sicherstellen
            if ! command -v node >/dev/null 2>&1; then
              apt-get update
              apt-get install -y curl
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi

            echo "📦 Dependencies installieren"
            if [ -f package-lock.json ]; then
              npm ci --omit=dev || npm ci
            else
              npm install --production || npm install
            fi

            echo "⚒️ Build (falls vorhanden)"
            npm run build || true

            echo "🚀 Starte/Reload PM2"
            if pm2 describe "$APP_NAME" --namespace "$NS" >/dev/null 2>&1; then
              pm2 reload "$APP_NAME" --namespace "$NS" --update-env || \
              pm2 restart "$APP_NAME" --namespace "$NS" --update-env
            else
              pm2 start bash --name "$APP_NAME" --namespace "$NS" -- -lc "cd $APP_DIR && $START_CMD"
            fi

            pm2 save
          EOF
